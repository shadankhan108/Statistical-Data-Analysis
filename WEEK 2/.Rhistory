# Print the string
print(info_string)
# Define the string
info_string <- "Name: Shadan Khan, Unit: Statistical Data Analysis, Task: Probability and Distributions Week 2-3"
# Print the string
print(info_string)
getwd
getwd()
#Question 2
data <- read.csv("weather (2).csv")
#Question 3
head(data)
cat("Number of Variables:", num_variables, "\n")
# Get the dimensions of the dataset
dimensions <- dim(data)
# Number of observations (rows)
num_observations <- dimensions[1]
# Number of variables (columns)
num_variables <- dimensions[2]
# Print the results
cat("Number of Observations:", num_observations, "\n")
cat("Number of Variables:", num_variables, "\n")
# Change the variable 'origin' to a factor and show the data type
df <- data %>%
mutate(origin = as.factor(origin))
# Verify the data type of 'origin'
class(data$origin)
# Change the variable 'origin' to a factor and show the data type
data <- data %>%
mutate(origin = as.factor(origin))
# Verify the data type of 'origin'
class(data$origin)
library(dplyr)
# Change the variable 'origin' to a factor and show the data type
data <- data %>%
mutate(origin = as.factor(origin))
# Change the variable 'origin' to a factor and show the data type
data <- data %>%
mutate(origin = as.factor(origin))
# Verify the data type of 'origin'
class(data$origin)
# Summarize mean and median for each level of 'origin'
summary_stats <- data %>%
group_by(origin) %>%
summarise(
mean_value = mean(some_numeric_variable, na.rm = TRUE),  # Replace 'some_numeric_variable' with the column of interest
median_value = median(some_numeric_variable, na.rm = TRUE) # Replace 'some_numeric_variable' with the column of interest
)
# Print the summary statistics
print(summary_stats)
# Summarize mean and median for each level of 'origin'
summary_stats <- data %>%
group_by(origin) %>%
summarise(
mean_value = mean(temp, na.rm = TRUE),
median_value = median(temp, na.rm = TRUE)
)
# Print the summary statistics
print(summary_stats)
# Install required packages
install.packages("nycflights13")
# Load required libraries
library(nycflights13)
# Load the airports data from the nycflights13 package
airports <- nycflights13::airports
# Merge the origin airport latitude and longitude with the dataset
data <- data %>%
left_join(airports, by = c("origin" = "faa")) %>%
rename(o_lat = lat, o_lon = lon) %>%
select(-name, -alt, -tz, -dst)
# Load required libraries
library(nycflights13)
library(dplyr)
# Load the airports data from the nycflights13 package
airports <- nycflights13::airports
# Merge the origin airport latitude and longitude with the dataset
data <- data %>%
left_join(airports, by = c("origin" = "faa")) %>%
rename(o_lat = lat, o_lon = lon) %>%
select(-name, -alt, -tz, -dst)
# Merge the destination airport latitude and longitude with the dataset
data <- data %>%
left_join(airports, by = c("dest" = "faa")) %>%
rename(d_lat = lat, d_lon = lon) %>%
select(-name, -alt, -tz, -dst)
library(nycflights13)
flights_data <- nycflights13::flights
airports_data <- nycflights13::airports
# Merge the latitude and longitude for the origin airports
flights_data <- flights_data %>%
left_join(airports_data, by = c("origin" = "faa")) %>%
rename(o_lat = lat, o_lon = lon)
# Merge the latitude and longitude for the destination airports
flights_data <- flights_data %>%
left_join(airports_data, by = c("dest" = "faa")) %>%
rename(d_lat = lat, d_lon = lon)
# Select relevant columns to display
flights_data <- flights_data %>%
2
# Select relevant columns to display
flights_data <- flights_data %>%
select(year, month, day, dep_time, arr_time, origin, dest, o_lat, o_lon, d_lat, d_lon, everything())
library(nycflights13)
flights_data <- nycflights13::flights
airports_data <- nycflights13::airports
# Merge the latitude and longitude for the origin airports
flights_data <- flights_data %>%
left_join(airports_data, by = c("origin" = "faa")) %>%
rename(o_lat = lat, o_lon = lon)
# Merge the latitude and longitude for the destination airports
flights_data <- flights_data %>%
left_join(airports_data, by = c("dest" = "faa")) %>%
rename(d_lat = lat, d_lon = lon)
# Select relevant columns to display
flights_data <- flights_data %>% select(year, month, day, dep_time, arr_time, origin, dest, o_lat, o_lon, d_lat, d_lon, everything())
# Display the first few rows of the updated dataset
print(head(flights_data))
data<- read.csv('DATA.csv')
data<- read.csv('DATA.csv')
data<- read.csv('DATA.csv',skip=11)
head(data)
library(dplyr)
data<- read.csv('DATA.csv',skip=11)
head(data)
library(dplyr)
library(stringr)
data<- read.csv('DATA.csv',skip=11)
head(data)
data <- data %>%
mutate(Clean.Start.Year = as.numeric(Clean.Start.Year))
data <- data %>%
mutate(Clean.End.Year = gsub("[^0-9]", "", `End.Year`))
data <- data %>%
mutate(Clean.End.Year = as.numeric(Clean.End.Year))
# Convert 'Start Year' and 'End Year' columns to numeric after removing non-numeric characters
data <- data %>%
mutate(
Start.Year = as.numeric(gsub("[^0-9]", "", Start.Year)),
End.Year = as.numeric(gsub("[^0-9]", "", End.Year))
)
# Calculate 'Number of Years' if it is NA, using 'End Year' - 'Start Year'
data <- data %>%
mutate(Number.of.Years = ifelse(Number.of.Years == "N/A", End.Year - Start.Year, Number.of.Years))
# Clean the 'Statistic Element' column by removing text after "for years"
data <- data %>%
mutate(Statistic.Element = str_remove(Statistic.Element, "for years.*"))
# Create a metadata table containing 'Statistic Element', 'Start Year', 'End Year', 'Number of Years', and 'Annual'
metadata <- data %>%
select(Statistic.Element, Start.Year, End.Year, Number.of.Years, Annual)
# Remove metadata columns from the original data
data <- data %>%
select(-Start.Year, -End.Year, -Number.of.Years, -Annual)
# Separate the data based on content categories
# Extract date-related data
date_data <- data %>%
filter(str_detect(Statistic.Element, "date", ignore.case = TRUE))
# We first separate the date data and keep all the data pertaining to dates together.
date_data <- data %>%
filter(grepl("date", Statistic.Element, ignore.case = TRUE))
# we then remove the date data from the original table for more cleaning.
# Remove the date rows from the original table
data <- data %>%
filter(!grepl("date", Statistic.Element, ignore.case = TRUE))
# Extract temperature-related data
temperature_data <- data %>%
filter(str_detect(Statistic.Element, "temperature|°C", ignore.case = TRUE))
# Extract rows related to rainfall metrics
rainfall_data <- data %>%
filter(grepl("rainfall|rain", Statistic.Element, ignore.case = TRUE))
# Extract rows related to sunshine and solar exposure metrics
sunshine_data <- data %>%
filter(grepl("sunshine|solar", Statistic.Element, ignore.case = TRUE))
# Extract rows related to rainfall metrics
rainfall_data <- data %>%
filter(grepl("rainfall|rain", Statistic.Element, ignore.case = TRUE))
# now we extract rows in rainfall metrics
rainfall_data <- data %>%
filter(grepl("rainfall|rain", Statistic.Element, ignore.case = TRUE))
# now we have to extract rows in sunshine and solar exposure metrics
sunshine_data <- data %>%
filter(grepl("sunshine|solar", Statistic.Element, ignore.case = TRUE))
# now we extract rows into other metrics like humidity, cloud cover, and evaporation
other_metrics_data <- data %>%
filter(grepl("humidity|cloud|evaporation|dew", Statistic.Element, ignore.case = TRUE))
# now we extract rows into wind speed metrics
wind_data <- data %>%
filter(grepl("wind|gust", Statistic.Element, ignore.case = TRUE))
rainfall_data <- rainfall_data %>% rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
# The Process for other_metrics_data
other_metrics_data <- other_metrics_data %>% rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
# The Process for sunshine_data
sunshine_data <- sunshine_data %>% rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
#The Process for temperature data
temperature_data <- temperature_data %>% rename(Months = Statistic.Element)
#The Process for temperature data
temperature_data <- temperature_data %>% rename(Months = Statistic.Element)
# now we extract The temperature data
temperature_data <- data %>%
filter(grepl("temperature|°C", Statistic.Element, ignore.case = TRUE))
#The Process for temperature data
temperature_data <- temperature_data %>% rename(Months = Statistic.Element)
#The Process for wind_data
wind_data <- wind_data %>%
rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
#loading the library dplyr
library(dplyr)
#loading the library stringr
library(stringr)
#we have skipped the first 11 lines beacuse it includes the metadata
data<- read.csv('DATA.csv',skip=11)
#we use head to see some of the data
head(data)
# Convert 'Start Year' and 'End Year' columns to numeric after removing non-numeric characters
data <- data %>%
mutate(
Start.Year = as.numeric(gsub("[^0-9]", "", Start.Year)),
End.Year = as.numeric(gsub("[^0-9]", "", End.Year))
)
# Calculate 'Number of Years' if it is NA, using 'End Year' - 'Start Year'
data <- data %>%
mutate(Number.of.Years = ifelse(Number.of.Years == "N/A", End.Year - Start.Year, Number.of.Years))
# Clean the 'Statistic Element' column by removing text after "for years"
data <- data %>%
mutate(Statistic.Element = str_remove(Statistic.Element, "for years.*"))
# Create a metadata table containing 'Statistic Element', 'Start Year', 'End Year', 'Number of Years', and 'Annual'
metadata <- data %>%
select(Statistic.Element, Start.Year, End.Year, Number.of.Years, Annual)
# Remove metadata columns from the original data
data <- data %>%
select(-Start.Year, -End.Year, -Number.of.Years, -Annual)
# We first separate the date data and keep all the data pertaining to dates together.
date_data <- data %>%
filter(grepl("date", Statistic.Element, ignore.case = TRUE))
# we then remove date data from the original table for more cleaning.
# Remove date rows from the original table
data <- data %>%
filter(!grepl("date", Statistic.Element, ignore.case = TRUE))
# now we extract rows in rainfall metrics
rainfall_data <- data %>%
filter(grepl("rainfall|rain", Statistic.Element, ignore.case = TRUE))
# now we have to extract rows in sunshine and solar exposure metrics
sunshine_data <- data %>%
filter(grepl("sunshine|solar", Statistic.Element, ignore.case = TRUE))
# now we extract The temperature data
temperature_data <- data %>%
filter(grepl("temperature|°C", Statistic.Element, ignore.case = TRUE))
# now we extract rows into other metrics like humidity, cloud cover, and evaporation
other_metrics_data <- data %>%
filter(grepl("humidity|cloud|evaporation|dew", Statistic.Element, ignore.case = TRUE))
# now we extract rows into wind speed metrics
wind_data <- data %>%
filter(grepl("wind|gust", Statistic.Element, ignore.case = TRUE))
rainfall_data <- rainfall_data %>% rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
head(rainfall_data[,1:4])
# The Process for other_metrics_data
other_metrics_data <- other_metrics_data %>% rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
head(other_metrics_data[,1:4])
# The Process for sunshine_data
sunshine_data <- sunshine_data %>% rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
head(sunshine_data[,1:2])
#The Process for temperature data
temperature_data <- temperature_data %>% rename(Months = Statistic.Element)
temperature_data<-t(temperature_data) temperature_data<-as.data.frame(temperature_data) head(temperature_data[,1:4])
#The Process for temperature data
temperature_data <- temperature_data %>% rename(Months = Statistic.Element)
head(temperature_data)
temperature_data<-as.data.frame(temperature_data) head(temperature_data[,1:4])
temperature_data<-as.data.frame(temperature_data)
head(temperature_data[,1:4])
#The Process for wind_data
wind_data <- wind_data %>%
rename(Months = `Statistic.Element`) %>% t() %>%
as.data.frame(stringsAsFactors = FALSE)
head(wind_data[,1:4])
